// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.



#include "AutoAlign.h"

AutoAlign::AutoAlign()
{
	// Add Commands here:
	// e.g. AddSequential(new Command1());
	//      AddSequential(new Command2());
	// these will run in order.

	// To run multiple commands at the same time,
	// use AddParallel()
	// e.g. AddParallel(new Command1());
	//      AddSequential(new Command2());
	// Command1 and Command2 will run in parallel.

	// A command group will require all of the subsystems that each member
	// would require.
	// e.g. if Command1 requires chassis, and Command2 requires arm,
	// a CommandGroup containing them would require both the chassis and the
	// arm.
}

double AutoAlign::AngleAlgor(float wR, float hR, float wL, float, hL)
{
	ratioRight = wR/hR;
	ratioLeft = wL/wL;
	ratioAverage = (ratioRight + ratioLeft)/2;
	if(ratioRight > ratioLeft) //Means right side is closer to max angle; that side is closer to the robot
	{
		leftOrRight = -1;
	}
	else if(ratioLeft > ratioRight)
	{
		leftOrRight = 1;
	}
	else //They're the same (improbable but possible)
	{
		leftOrRight = 0;
		return maxRatioAngle;
	}

	if(leftOrRight == 1) //Right side closer
	{
		return ( 0.0243029 + sqrt( ( -0.0243029 * -0.0243029 ) - ( 4 * 0.000111078 * (2.66466 - ratioAverage) ) ) ) / (2*0.000111078);
		//Line of best fit for the graph that returns the angle (fairly accurate)
	}
	else if(leftOrRight == -1)
	{
		return ( 0.00023557 + sqrt( ( -0.00023557 * -0.00023557 ) - ( 4 * 0.0000465902 * (2.2209 - ratioAverage) ) ) ) / (2*0.0000465902);
	}
}